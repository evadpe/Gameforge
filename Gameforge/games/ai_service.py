"""
Service d'IA pour g√©n√©rer du contenu de jeu vid√©o
Utilise l'API Mistral AI pour le texte et les images
"""

import os
import json
import random
import re
import time
from typing import Dict, List, Optional
from mistralai import Mistral
from django.conf import settings
from django.core.files.base import ContentFile


class AIService:
    def __init__(self):
        # M√©thode 1: Via les settings Django (recommand√©e)
        self.mistral_key = getattr(settings, 'MISTRAL_API_KEY', None)
        
        # M√©thode 2: Fallback direct depuis les variables d'environnement
        if not self.mistral_key:
            self.mistral_key = os.getenv('MISTRAL_API_KEY')
        
        # Nettoyer la cl√©
        if self.mistral_key:
            self.mistral_key = self.mistral_key.strip().lstrip('=')
        
        # Initialiser le client Mistral
        self.client = None
        self.model = "mistral-small-latest"
        self.image_agent = None
        
        # Configuration retry pour g√©rer les erreurs 429
        self.max_retries = 3
        self.retry_delay = 2  # secondes
        
        if self.mistral_key and len(self.mistral_key) > 10:
            try:
                self.client = Mistral(api_key=self.mistral_key)
                print(f"‚úÖ Client Mistral initialis√© avec la cl√© : {self.mistral_key[:8]}...")
                
                # Cr√©er un agent pour la g√©n√©ration d'images
                try:
                    self.image_agent = self.client.beta.agents.create(
                        model="mistral-medium-latest",
                        name="Game Image Generator",
                        description="Agent sp√©cialis√© dans la g√©n√©ration d'images conceptuelles pour jeux vid√©o",
                        instructions="Tu es un artiste conceptuel expert en jeux vid√©o. G√©n√®re des images √©piques et professionnelles qui capturent l'essence des univers de jeux.",
                        tools=[{"type": "image_generation"}],
                        completion_args={
                            "temperature": 0.7,
                            "top_p": 0.95,
                        }
                    )
                    print(f"‚úÖ Agent de g√©n√©ration d'images cr√©√©: {self.image_agent.id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Impossible de cr√©er l'agent d'images (peut-√™tre pas activ√© sur votre compte): {e}")
                    self.image_agent = None
                    
            except Exception as e:
                print(f"‚ùå Erreur initialisation client Mistral: {e}")
                self.client = None
        else:
            print("‚ö†Ô∏è MISTRAL_API_KEY invalide ou manquante - mode d√©mo activ√©")
            print(f"   Cl√© trouv√©e: '{self.mistral_key}'")
    
    def _clean_markdown(self, text: str) -> str:
        """
        Nettoie le markdown pour faciliter le parsing
        Enl√®ve les ast√©risques, etc.
        """
        # Enlever les ast√©risques markdown (gras)
        text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)
        text = re.sub(r'\*([^*]+)\*', r'\1', text)
        return text
    
    def _call_api(self, prompt: str, max_tokens: int = 500) -> str:
        """
        Appelle l'API Mistral pour la g√©n√©ration de texte avec retry automatique
        """
        if not self.client:
            print("‚ö†Ô∏è Mode d√©mo - g√©n√©ration de contenu mock")
            return self._generate_mock_content(prompt)
        
        # Tentatives avec retry exponentiel
        for attempt in range(self.max_retries):
            try:
                print(f"üì° Appel Mistral API (tentative {attempt + 1}/{self.max_retries})...")
                chat_response = self.client.chat.complete(
                    model=self.model,
                    messages=[
                        {
                            "role": "system", 
                            "content": "Tu es un cr√©ateur de jeux vid√©o expert. R√©ponds de mani√®re concise et cr√©ative en fran√ßais."
                        },
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    temperature=0.8,
                    max_tokens=max_tokens,
                    top_p=0.95
                )
                
                result = chat_response.choices[0].message.content
                print(f"‚úÖ R√©ponse API re√ßue : {result[:100]}...")
                return result.strip()
                
            except Exception as e:
                error_str = str(e)
                
                # D√©tecter erreur 429 (rate limit)
                if "429" in error_str or "capacity exceeded" in error_str.lower():
                    if attempt < self.max_retries - 1:
                        wait_time = self.retry_delay * (2 ** attempt)  # Backoff exponentiel
                        print(f"‚è≥ Rate limit atteint (429). Attente de {wait_time}s avant nouvelle tentative...")
                        time.sleep(wait_time)
                        continue
                    else:
                        print(f"‚ùå Rate limit persistant apr√®s {self.max_retries} tentatives")
                        print("üí° Basculement vers le mode d√©mo")
                        return self._generate_mock_content(prompt)
                
                # Autres erreurs
                print(f"‚ùå Erreur Mistral API: {e}")
                if attempt < self.max_retries - 1:
                    print(f"üîÑ Nouvelle tentative dans {self.retry_delay}s...")
                    time.sleep(self.retry_delay)
                    continue
                else:
                    return self._generate_mock_content(prompt)
        
        return self._generate_mock_content(prompt)

    def _generate_mock_content(self, prompt: str) -> str:
        """
        G√©n√®re du contenu de d√©mo sans API - AM√âLIOR√â pour √™tre plus vari√©
        """
        import hashlib
        
        # Cr√©er un seed unique bas√© sur le prompt
        seed = hashlib.md5(prompt.encode()).hexdigest()
        hash_val = int(seed, 16)
        
        if "titre" in prompt.lower():
            prefixes = [
                "Les Chroniques de", "La L√©gende de", "L'Aventure de", "Les Secrets de",
                "Le Royaume de", "Les Gardiens de", "L'√âveil de", "La Qu√™te de",
                "Les Ombres de", "Le Destin de", "Les H√©ros de", "L'Odyss√©e de"
            ]
            suffixes = [
                "l'Ombre", "la Lumi√®re", "l'√âternit√©", "Azura", "Nexus",
                "Eldoria", "V√©ridian", "l'Aube", "Midnight", "Atheron",
                "Zephyria", "Obsidian", "Celestia", "Avalon", "Arcadia"
            ]
            prefix = prefixes[hash_val % len(prefixes)]
            suffix = suffixes[(hash_val // 13) % len(suffixes)]
            return f"{prefix} {suffix}"
        
        elif "personnage" in prompt.lower() or "NOM:" in prompt:
            # Mock de personnages avec format structur√© et variation
            names = ["Aelric", "Zara", "Theron", "Lyssa", "Kael", "Nyx", "Orin", "Selene"]
            roles = ["h√©ros", "antagoniste", "alli√©", "mentor"]
            classes = ["guerrier", "mage", "archer", "voleur", "paladin", "druide"]
            
            # D√©tecter l'ambiance dans le prompt
            ambiance_detected = "default"
            if "sombre" in prompt.lower():
                ambiance_detected = "sombre"
            elif "joyeux" in prompt.lower():
                ambiance_detected = "joyeux"
            elif "mysterieux" in prompt.lower():
                ambiance_detected = "mysterieux"
            
            backgrounds = {
                'sombre': "Hant√© par un pass√© tragique, ce personnage cherche la r√©demption dans les ombres. Son c≈ìur porte les cicatrices de pertes indicibles.",
                'joyeux': "Optimiste et plein d'√©nergie, ce personnage apporte joie et espoir partout o√π il passe. Son rire est contagieux.",
                'mysterieux': "Les origines de ce personnage restent √©nigmatiques. Entour√© de secrets, sa v√©ritable nature reste inconnue.",
                'default': "Un personnage exp√©riment√© dont les comp√©tences sont reconnues. D√©termin√© √† accomplir sa destin√©e."
            }
            
            name = names[hash_val % len(names)]
            role = roles[(hash_val // 7) % len(roles)]
            classe = classes[(hash_val // 11) % len(classes)]
            background = backgrounds.get(ambiance_detected, backgrounds['default'])
            
            return f"""NOM: {name}
ROLE: {role}
CLASSE: {classe}
PERSONNALITE: Courageux, loyal, myst√©rieux
BACKGROUND: {background}
APPARENCE: Allure noble avec une aura de puissance
COMPETENCES: Ma√Ætrise du combat et des strat√©gies
GAMEPLAY: Personnage √©quilibr√© avec des capacit√©s vari√©es

---"""
        
        elif "lieu" in prompt.lower() or "TYPE:" in prompt:
            # Mock de lieux avec format structur√© et variation
            places = ["Tour", "Cit√©", "For√™t", "Temple", "Montagne", "Ruines", "Grotte", "Ch√¢teau"]
            adjectives = ["Sombre", "Ancienne", "Myst√©rieuse", "Sacr√©e", "Oubli√©e", "√âternelle", "Maudite", "C√©leste"]
            
            # D√©tecter l'ambiance dans le prompt
            ambiance_detected = "default"
            if "sombre" in prompt.lower() or "dark" in prompt.lower():
                ambiance_detected = "sombre"
            elif "joyeux" in prompt.lower() or "happy" in prompt.lower():
                ambiance_detected = "joyeux"
            elif "mysterieux" in prompt.lower() or "mysterious" in prompt.lower():
                ambiance_detected = "mysterieux"
            
            descriptions = {
                'sombre': "Un lieu d√©sol√© o√π r√®gne une atmosph√®re oppressante. Les ombres semblent vivantes et peu osent s'y aventurer.",
                'joyeux': "Un lieu vibrant de vie et de couleurs √©clatantes. L'atmosph√®re y est chaleureuse et accueillante.",
                'mysterieux': "Un lieu √©nigmatique dont les secrets restent bien gard√©s. Des ph√©nom√®nes √©tranges y d√©fient toute explication.",
                'default': "Un lieu l√©gendaire rempli de myst√®res et de dangers anciens."
            }
            
            place = places[hash_val % len(places)]
            adj = adjectives[(hash_val // 7) % len(adjectives)]
            description = descriptions.get(ambiance_detected, descriptions['default'])
            
            return f"""NOM: {place} {adj}
TYPE: donjon
DESCRIPTION: {description}
IMPORTANCE: Point cl√© de la qu√™te principale
DANGERS: Cr√©atures hostiles et pi√®ges mortels
TRESORS: Artefacts puissants et connaissances perdues

---"""
        
        elif "sc√©nario" in prompt.lower() or "acte" in prompt.lower():
            return """Le h√©ros d√©couvre son destin dans un monde au bord du chaos.

Les forces obscures se rassemblent et le h√©ros doit former une alliance improbable pour les affronter.

Dans une bataille √©pique finale, le h√©ros r√©v√®le sa v√©ritable nature et sauve le monde.

Un ancien secret r√©v√®le que le v√©ritable ennemi √©tait cach√© depuis le d√©but."""
        
        return "Contenu g√©n√©r√© en mode d√©mo (API Mistral indisponible - rate limit atteint)"
    
    def generate_game_title(self, genre: str, ambiance: str, keywords: List[str]) -> str:
        """
        G√©n√®re un titre de jeu
        """
        keywords_str = ", ".join(keywords) if keywords else "aventure"
        
        prompt = f"""G√©n√®re UN SEUL titre original et captivant pour un jeu vid√©o {genre} avec une ambiance {ambiance}.
Mots-cl√©s: {keywords_str}

R√©ponds UNIQUEMENT avec le titre, sans guillemets, sans explication, sans introduction.

Titre:"""
        
        title = self._call_api(prompt, max_tokens=50)
        title = title.strip().strip('"').strip("'").strip()
        lines = title.split('\n')
        return lines[0] if lines else title
    
    def generate_universe(self, game_title: str, genre: str, ambiance: str, keywords: str) -> Dict[str, str]:
        """
        G√©n√®re la description de l'univers du jeu
        """
        prompt = f"""D√©cris l'univers d'un jeu vid√©o intitul√© "{game_title}".
Genre: {genre}
Ambiance: {ambiance}
√âl√©ments cl√©s: {keywords}

√âcris 2-3 paragraphes d√©crivant l'univers, le contexte, et l'atmosph√®re du jeu.
Sois descriptif et immersif.

Description:"""
        
        description = self._call_api(prompt, max_tokens=400)
        
        return {
            'description': description.strip(),
            'style_graphique': self._suggest_art_style(genre, ambiance),
            'type_monde': self._suggest_world_type(genre)
        }
    
    def _suggest_art_style(self, genre: str, ambiance: str) -> str:
        """Sugg√®re un style artistique bas√© sur le genre et l'ambiance"""
        mapping = {
            'horror': 'realiste',
            'sci-fi': 'realiste',
            'cyberpunk': 'realiste',
            'fantasy': 'anime',
            'rpg': 'anime',
        }
        return mapping.get(genre, 'realiste')
    
    def _suggest_world_type(self, genre: str) -> str:
        """Sugg√®re un type de monde bas√© sur le genre"""
        mapping = {
            'rpg': 'open_world',
            'aventure': 'open_world',
            'action': 'lineaire',
            'horror': 'lineaire',
            'strategie': 'hub',
        }
        return mapping.get(genre, 'open_world')
    
    def generate_scenario(self, game_title: str, universe_description: str, genre: str) -> Dict[str, str]:
        """
        G√©n√®re un sc√©nario en 3 actes
        """
        prompt = f"""Cr√©e un sc√©nario de jeu vid√©o en 3 actes pour "{game_title}".
Genre: {genre}
Univers: {universe_description[:200]}

Structure (√©cris directement chaque acte, sans les labels):

1. ACTE 1 (Introduction): Un paragraphe

2. ACTE 2 (D√©veloppement): Un paragraphe

3. ACTE 3 (Climax): Un paragraphe

4. TWIST: Un retournement de situation inattendu

Sc√©nario:"""
        
        scenario_text = self._call_api(prompt, max_tokens=600)
        
        # Parser le r√©sultat
        paragraphs = [p.strip() for p in scenario_text.split('\n\n') if p.strip()]
        
        # Filtrer les labels si pr√©sents
        clean_paragraphs = []
        for p in paragraphs:
            # Enlever les num√©ros et labels en d√©but
            p = p.lstrip('1234.- ')
            if not any(label in p[:30] for label in ['ACTE', 'TWIST', 'Introduction', 'D√©veloppement', 'Climax']):
                clean_paragraphs.append(p)
            else:
                # Garder ce qui est apr√®s le label
                for sep in [':', '-', '.']:
                    if sep in p:
                        clean_paragraphs.append(p.split(sep, 1)[1].strip())
                        break
        
        return {
            'acte_1': clean_paragraphs[0] if len(clean_paragraphs) > 0 else "Le h√©ros d√©couvre son destin.",
            'acte_2': clean_paragraphs[1] if len(clean_paragraphs) > 1 else "Le h√©ros affronte des √©preuves.",
            'acte_3': clean_paragraphs[2] if len(clean_paragraphs) > 2 else "Le h√©ros triomphe du mal.",
            'twist': clean_paragraphs[3] if len(clean_paragraphs) > 3 else "Un secret est r√©v√©l√©."
        }

    def generate_characters(self, game_title: str, genre: str, num_characters: int = 3, ambiance: str = None, mots_cles: str = None, universe_description: str = None) -> List[Dict[str, str]]:
        """
        G√©n√®re des personnages d√©taill√©s pour le jeu avec coh√©rence th√©matique
        """
        # Construire un prompt enrichi avec tous les th√®mes
        context_parts = [f'Jeu: "{game_title}"', f'Genre: {genre}']
        
        if ambiance:
            context_parts.append(f'Ambiance: {ambiance}')
        if mots_cles:
            context_parts.append(f'Th√®mes cl√©s: {mots_cles}')
        if universe_description:
            context_parts.append(f'Univers: {universe_description[:150]}')
        
        context = '\n'.join(context_parts)
        
        prompt = f"""Cr√©e {num_characters} personnages coh√©rents avec le contexte suivant:

{context}

IMPORTANT: Les personnages doivent refl√©ter l'ambiance et les th√®mes du jeu. Par exemple:
- Ambiance "sombre" ‚Üí personnages tortur√©s, moralement ambigus, avec des backstories tragiques
- Ambiance "joyeux" ‚Üí personnages optimistes, color√©s, avec des motivations positives
- Th√®mes "magie, dragons" ‚Üí classes et comp√©tences li√©es √† la magie et aux dragons
- Genre "cyberpunk" ‚Üí noms futuristes, comp√©tences technologiques, background urbain dystopique

Pour CHAQUE personnage, utilise EXACTEMENT ce format:

NOM: [nom adapt√© au th√®me et genre]
ROLE: [h√©ros/antagoniste/alli√©/mentor]
CLASSE: [classe coh√©rente avec le genre et les th√®mes]
PERSONNALITE: [traits refl√©tant l'ambiance]
BACKGROUND: [histoire en 2-3 phrases li√©e √† l'univers]
APPARENCE: [description physique coh√©rente avec l'ambiance]
COMPETENCES: [capacit√©s li√©es aux th√®mes cl√©s]
GAMEPLAY: [style de jeu adapt√© au genre]

NOM: [nom du personnage]
ROLE: [h√©ros/antagoniste/alli√©/mentor]
CLASSE: [guerrier/mage/archer/voleur/etc]
PERSONNALITE: [3-4 traits de caract√®re]
BACKGROUND: [histoire en 2-3 phrases]
APPARENCE: [description physique]
COMPETENCES: [capacit√©s principales]
GAMEPLAY: [comment on joue ce personnage]

---

Personnages:"""

        characters_text = self._call_api(prompt, max_tokens=800)
        characters_text = self._clean_markdown(characters_text)
        print(f"üìù Texte nettoy√© : {characters_text[:200]}...")
        
        characters = []
        char_blocks = characters_text.split('---')
        
        for block in char_blocks:
            if 'NOM:' in block:
                char = {}
                lines = block.strip().split('\n')
                
                current_field = None
                for line in lines:
                    line = line.strip()
                    if line.startswith('NOM:'):
                        char['nom'] = line.replace('NOM:', '').strip()
                        current_field = None
                    elif line.startswith('ROLE:') or line.startswith('R√îLE:'):
                        char['role'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('CLASSE:'):
                        char['classe'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('PERSONNALITE:') or line.startswith('PERSONNALIT√â:'):
                        char['personnalite'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('BACKGROUND:'):
                        char['background'] = line.split(':', 1)[1].strip()
                        current_field = 'background'
                    elif line.startswith('APPARENCE:'):
                        char['apparence'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('COMPETENCES:') or line.startswith('COMP√âTENCES:'):
                        char['competences'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('GAMEPLAY:'):
                        char['gameplay_description'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif current_field and line and not any(x in line for x in ['NOM:', 'ROLE:', 'CLASSE:', 'PERSONNALITE:', 'BACKGROUND:', 'APPARENCE:', 'COMPETENCES:', 'GAMEPLAY:']):
                        char[current_field] += ' ' + line
                
                if 'nom' in char and 'background' in char:
                    char.setdefault('role', 'alli√©')
                    char.setdefault('classe', 'guerrier')
                    char.setdefault('personnalite', 'Courageux et d√©termin√©')
                    char.setdefault('apparence', 'Apparence h√©ro√Øque')
                    char.setdefault('competences', 'Combat et leadership')
                    char.setdefault('gameplay_description', 'Personnage √©quilibr√©')
                    characters.append(char)
                    print(f"‚úÖ Personnage pars√© : {char['nom']}")
        
        # G√©n√©ration al√©atoire UNIQUE en cas d'√©chec
        if len(characters) < num_characters:
            print(f"‚ö†Ô∏è Seulement {len(characters)}/{num_characters} personnages pars√©s")
            print("üé≤ G√©n√©ration de personnages uniques...")
            
            import hashlib
            seed = f"{game_title}_{genre}_{ambiance}_{len(characters)}"
            
            roles = ['h√©ros', 'antagoniste', 'alli√©', 'mentor', 'rival']
            classes = ['guerrier', 'mage', 'archer', 'voleur', 'paladin', 'druide', 'assassin', 'clerc']
            traits = ['courageux', 'rus√©', 'loyal', 'myst√©rieux', 'impulsif', 'sage', 'sarcastique', 'noble']
            name_parts = ['Ae', 'Kal', 'Thy', 'Zar', 'Lyn', 'Mor', 'Syl', 'Rae', 'Dor', 'Vel']
            
            # Templates vari√©s pour les backgrounds selon l'ambiance
            background_templates = {
                'sombre': [
                    "Hant√© par un pass√© tragique, ce {classe} cherche la r√©demption dans les ombres de {game_title}.",
                    "Ayant perdu tout ce qui lui √©tait cher, ce {classe} {trait1} poursuit une qu√™te d√©sesp√©r√©e.",
                    "Un {classe} tourment√© dont l'√¢me est aussi {trait1} que son destin est sombre."
                ],
                'joyeux': [
                    "Ce {classe} optimiste apporte joie et espoir partout o√π il passe dans {game_title}.",
                    "Un {classe} {trait1} qui croit fermement que chaque jour est une nouvelle aventure.",
                    "Avec un sourire √©clatant, ce {classe} inspire courage et bonheur √† ses compagnons."
                ],
                'mysterieux': [
                    "Les origines de ce {classe} restent √©nigmatiques, mais sa ma√Ætrise est ind√©niable.",
                    "Un {classe} {trait1} entour√© de secrets et de l√©gendes oubli√©es.",
                    "Personne ne conna√Æt vraiment ce {classe}, mais tous respectent ses capacit√©s."
                ],
                'epique': [
                    "Destin√© √† accomplir de grandes choses, ce {classe} {trait1} est une l√©gende vivante.",
                    "Un {classe} h√©ro√Øque dont les exploits r√©sonnent √† travers tout {game_title}.",
                    "Ce {classe} porte sur ses √©paules le poids du destin et l'espoir de tous."
                ],
                'default': [
                    "Un {classe} {trait1} dont les comp√©tences sont reconnues dans tout {game_title}.",
                    "Ce {classe} poss√®de un talent naturel et une d√©termination sans faille.",
                    "Un {classe} exp√©riment√© dont le {trait2} en fait un alli√© pr√©cieux."
                ]
            }
            
            while len(characters) < num_characters:
                char_seed = f"{seed}_{len(characters)}"
                hash_val = int(hashlib.md5(char_seed.encode()).hexdigest(), 16)
                
                role = roles[hash_val % len(roles)]
                classe = classes[(hash_val // 10) % len(classes)]
                trait1 = traits[(hash_val // 100) % len(traits)]
                trait2 = traits[(hash_val // 1000) % len(traits)]
                name = name_parts[hash_val % len(name_parts)] + name_parts[(hash_val // 7) % len(name_parts)]
                
                # Choisir template selon l'ambiance
                amb_key = ambiance.lower() if ambiance and ambiance.lower() in background_templates else 'default'
                templates = background_templates[amb_key]
                template = templates[(hash_val // 50) % len(templates)]
                background = template.format(classe=classe, trait1=trait1, trait2=trait2, game_title=game_title)
                
                char = {
                    'nom': name,
                    'role': role,
                    'classe': classe,
                    'personnalite': f"{trait1.capitalize()}, {trait2}",
                    'background': background,
                    'apparence': f"{classe.capitalize()} √† l'allure {trait1}",
                    'competences': f"Ma√Ætrise du {classe} et {trait2}",
                    'gameplay_description': f"Personnage {role} jouable en {classe}"
                }
                characters.append(char)
                print(f"üé≤ Personnage g√©n√©r√© : {char['nom']}")
        
        return characters[:num_characters]

    def generate_locations(self, game_title: str, universe: str, num_locations: int = 4, genre: str = None, ambiance: str = None, mots_cles: str = None) -> List[Dict[str, str]]:
        """
        G√©n√®re des lieux embl√©matiques coh√©rents avec les th√®mes
        """
        # Construire un contexte enrichi
        context_parts = [f'Jeu: "{game_title}"', f'Univers: {universe[:150]}']
        
        if genre:
            context_parts.append(f'Genre: {genre}')
        if ambiance:
            context_parts.append(f'Ambiance: {ambiance}')
        if mots_cles:
            context_parts.append(f'Th√®mes: {mots_cles}')
        
        context = '\n'.join(context_parts)
        
        prompt = f"""Cr√©e {num_locations} lieux embl√©matiques coh√©rents avec:

{context}

IMPORTANT: Les lieux doivent refl√©ter l'ambiance et les th√®mes:
- Ambiance "sombre" ‚Üí lieux oppressants, ruines, cachots, zones d√©sol√©es
- Ambiance "joyeux" ‚Üí villages color√©s, march√©s anim√©s, jardins enchant√©s
- Th√®mes "magie" ‚Üí tours de mages, biblioth√®ques mystiques, portails magiques
- Th√®mes "technologie" ‚Üí laboratoires, usines, bases high-tech
- Genre "horror" ‚Üí lieux inqui√©tants avec atmosph√®re mena√ßante

Pour chaque lieu, utilise EXACTEMENT ce format:

NOM: [nom √©vocateur adapt√© aux th√®mes]
TYPE: [type coh√©rent avec le genre et l'ambiance]
DESCRIPTION: [2-3 phrases refl√©tant l'ambiance]
IMPORTANCE: [r√¥le dans l'histoire li√© aux th√®mes]
DANGERS: [dangers coh√©rents avec le genre]
TRESORS: [r√©compenses li√©es aux th√®mes cl√©s]

NOM: [nom du lieu]
TYPE: [ville/for√™t/dongeon/temple/ch√¢teau/ruines/etc]
DESCRIPTION: [description en 2-3 phrases]
IMPORTANCE: [importance dans l'histoire]
DANGERS: [dangers ou √©nigmes pr√©sents]
TRESORS: [r√©compenses ou secrets √† d√©couvrir]

---

Lieux:"""

        locations_text = self._call_api(prompt, max_tokens=700)
        locations_text = self._clean_markdown(locations_text)
        print(f"üìù Texte nettoy√© : {locations_text[:200]}...")
        
        locations = []
        loc_blocks = locations_text.split('---')
        
        for block in loc_blocks:
            if 'NOM:' in block:
                loc = {}
                lines = block.strip().split('\n')
                
                current_field = None
                for line in lines:
                    line = line.strip()
                    if line.startswith('NOM:'):
                        loc['nom'] = line.replace('NOM:', '').strip()
                        current_field = None
                    elif line.startswith('TYPE:'):
                        loc['type'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('DESCRIPTION:'):
                        loc['description'] = line.split(':', 1)[1].strip()
                        current_field = 'description'
                    elif line.startswith('IMPORTANCE:'):
                        loc['importance'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('DANGERS:'):
                        loc['dangers'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif line.startswith('TRESORS:') or line.startswith('TR√âSORS:'):
                        loc['tresors'] = line.split(':', 1)[1].strip()
                        current_field = None
                    elif current_field and line and not any(x in line for x in ['NOM:', 'TYPE:', 'DESCRIPTION:', 'IMPORTANCE:', 'DANGERS:', 'TRESORS:']):
                        loc[current_field] += ' ' + line
                
                if 'nom' in loc and 'description' in loc:
                    loc.setdefault('type', 'zone myst√©rieuse')
                    loc.setdefault('importance', 'Lieu cl√© pour la qu√™te principale')
                    loc.setdefault('dangers', 'Cr√©atures hostiles et pi√®ges anciens')
                    loc.setdefault('tresors', 'Art√©facts puissants et connaissances perdues')
                    locations.append(loc)
                    print(f"‚úÖ Lieu pars√© : {loc['nom']}")
        
        # G√©n√©ration al√©atoire UNIQUE en cas d'√©chec
        if len(locations) < num_locations:
            print(f"‚ö†Ô∏è Seulement {len(locations)}/{num_locations} lieux pars√©s")
            print("üé≤ G√©n√©ration de lieux uniques...")
            
            import hashlib
            seed = f"{game_title}_{universe}_{genre}_{ambiance}_{len(locations)}"
            
            types = ['donjon', 'ville', 'for√™t', 'montagne', 'temple', 'ruines', 'grotte', 'ch√¢teau']
            prefixes = ['Tour de', 'Cit√© de', 'For√™t des', 'Mont', 'Temple de', 'Ruines de', 'Grotte du', 'Ch√¢teau de']
            suffixes = ['Lumi√®re', 'T√©n√®bres', 'Myst√®res', 'Sagesse', 'Perdition', '√âternit√©', 'Silence', 'Temp√™te']
            
            # Templates vari√©s pour les descriptions selon l'ambiance
            description_templates = {
                'sombre': [
                    "Un {type_loc} d√©sol√© o√π r√®gne une atmosph√®re oppressante. Les ombres semblent vivantes et les √©chos du pass√© hantent chaque recoin.",
                    "Ce {type_loc} abandonn√© est impr√©gn√© de tristesse et de myst√®re. Peu osent s'aventurer dans ses profondeurs mena√ßantes.",
                    "Les ruines de ce {type_loc} racontent une histoire tragique. L'obscurit√© y est presque palpable."
                ],
                'joyeux': [
                    "Un {type_loc} vibrant de vie et de couleurs √©clatantes. Les rires et la musique emplissent l'air de cette oasis de bonheur.",
                    "Ce {type_loc} enchanteur accueille les voyageurs avec chaleur. Son ambiance festive apporte r√©confort et espoir.",
                    "Un {type_loc} lumineux o√π la joie est contagieuse. Chaque visiteur repart le c≈ìur plus l√©ger."
                ],
                'mysterieux': [
                    "Un {type_loc} √©nigmatique dont les secrets restent bien gard√©s. Des ph√©nom√®nes √©tranges y d√©fient toute explication.",
                    "Ce {type_loc} ancien cache des myst√®res insondables. Les l√©gendes qui l'entourent sont aussi fascinantes qu'inqui√©tantes.",
                    "Un {type_loc} o√π le temps semble suspendu. Les myst√®res qui s'y cachent attirent les curieux et les aventuriers."
                ],
                'epique': [
                    "Un {type_loc} majestueux qui inspire respect et admiration. Son importance dans l'histoire est grav√©e dans chaque pierre.",
                    "Ce {type_loc} l√©gendaire a √©t√© le th√©√¢tre de batailles √©piques. Sa grandeur t√©moigne des h√©ros qui y ont combattu.",
                    "Un {type_loc} imposant dont la magnificence coupe le souffle. C'est ici que le destin du monde se joue."
                ],
                'default': [
                    "Un {type_loc} remarquable qui joue un r√¥le crucial dans l'aventure. Son architecture unique attire l'attention.",
                    "Ce {type_loc} fascinant rec√®le bien des surprises pour les explorateurs audacieux.",
                    "Un {type_loc} important dont l'influence se fait sentir dans toute la r√©gion."
                ]
            }
            
            danger_templates = [
                "Cr√©atures hostiles et pi√®ges ancestraux",
                "Gardiens corrompus et √©nigmes mortelles",
                "Forces myst√©rieuses et embuscades dangereuses",
                "Entit√©s anciennes et d√©fenses magiques",
                "Pi√®ges sophistiqu√©s et ennemis redoutables"
            ]
            
            treasure_templates = [
                "Art√©facts l√©gendaires et connaissances perdues",
                "Tr√©sors cach√©s et secrets anciens",
                "Reliques puissantes et grimoires mystiques",
                "Richesses inestimables et pouvoirs oubli√©s",
                "√âquipements rares et manuscrits pr√©cieux"
            ]
            
            while len(locations) < num_locations:
                loc_seed = f"{seed}_{len(locations)}"
                hash_val = int(hashlib.md5(loc_seed.encode()).hexdigest(), 16)
                
                type_loc = types[hash_val % len(types)]
                prefix = prefixes[hash_val % len(prefixes)]
                suffix = suffixes[(hash_val // 7) % len(suffixes)]
                
                # Choisir template selon l'ambiance
                amb_key = ambiance.lower() if ambiance and ambiance.lower() in description_templates else 'default'
                templates = description_templates[amb_key]
                template = templates[(hash_val // 50) % len(templates)]
                description = template.format(type_loc=type_loc)
                
                loc = {
                    'nom': f"{prefix} {suffix}",
                    'type': type_loc,
                    'description': description,
                    'importance': f"Lieu strat√©gique li√© aux √©v√©nements majeurs de {game_title}",
                    'dangers': danger_templates[(hash_val // 100) % len(danger_templates)],
                    'tresors': treasure_templates[(hash_val // 200) % len(treasure_templates)]
                }
                locations.append(loc)
                print(f"üé≤ Lieu g√©n√©r√© : {loc['nom']}")
        
        return locations[:num_locations]

    def generate_game_image(self, game_title: str, genre: str, ambiance: str, universe_description: str) -> str:
        """
        G√©n√®re une description textuelle pour une image conceptuelle
        """
        prompt = f"""Cr√©e une description d√©taill√©e pour une image conceptuelle de jeu vid√©o intitul√© "{game_title}".

Genre: {genre}
Ambiance: {ambiance}
Univers: {universe_description[:200]}

La description doit √™tre visuelle et d√©taill√©e, incluant:
- Style artistique
- √âl√©ments principaux
- Couleurs dominantes
- Composition de l'image

Description conceptuelle:"""

        image_description = self._call_api(prompt, max_tokens=300)
        return image_description.strip()

    def generate_and_save_image(self, game_title: str, genre: str, ambiance: str, universe_description: str) -> Dict:
        """
        G√©n√®re une vraie image avec Mistral Agents API (FLUX)
        """
        if not self.client or not self.image_agent:
            print("‚ö†Ô∏è Mode d√©mo - g√©n√©ration d'image d√©sactiv√©e")
            description = self.generate_game_image(game_title, genre, ambiance, universe_description)
            return {
                'description': description,
                'image_data': None,
                'image_url': None
            }
        
        prompt = f"""G√©n√®re une image de cover art professionnelle pour le jeu vid√©o "{game_title}".

Style: Cover art AAA, qualit√© cin√©matographique
Genre: {genre}
Ambiance: {ambiance}
Univers: {universe_description[:250]}

L'image doit √™tre √©pique, immersive et capturer visuellement l'essence du jeu."""
        
        try:
            print(f"üé® G√©n√©ration d'image pour '{game_title}'...")
            
            response = self.client.beta.conversations.start(
                agent_id=self.image_agent.id,
                inputs=prompt
            )
            
            file_id = None
            from mistralai.models import ToolFileChunk
            
            if hasattr(response, 'outputs') and response.outputs:
                for output in response.outputs:
                    if hasattr(output, 'content'):
                        for chunk in output.content:
                            if isinstance(chunk, ToolFileChunk):
                                file_id = chunk.file_id
                                print(f"‚úÖ Image g√©n√©r√©e avec file_id: {file_id}")
                                break
                        if file_id:
                            break
            
            if file_id:
                print(f"‚¨áÔ∏è T√©l√©chargement de l'image...")
                file_bytes = self.client.files.download(file_id=file_id).read()
                print(f"‚úÖ Image t√©l√©charg√©e ({len(file_bytes)} bytes)")
                
                return {
                    'description': prompt,
                    'image_data': ContentFile(file_bytes),
                    'image_url': None
                }
            else:
                print("‚ö†Ô∏è Aucune image g√©n√©r√©e dans la r√©ponse")
                description = self.generate_game_image(game_title, genre, ambiance, universe_description)
                return {
                    'description': description,
                    'image_data': None,
                    'image_url': None
                }
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration d'image: {e}")
            description = self.generate_game_image(game_title, genre, ambiance, universe_description)
            return {
                'description': description,
                'image_data': None,
                'image_url': None
            }

    def generate_random_game_params(self) -> Dict[str, str]:
        """
        G√©n√®re des param√®tres al√©atoires pour un jeu
        """
        genres = ['rpg', 'action', 'aventure', 'strategie', 'horror', 'sci-fi', 'fantasy', 'cyberpunk']
        ambiances = ['sombre', 'joyeux', 'mysterieux', 'epique', 'humoristique']
        
        keywords_pool = [
            'magie', 'dragons', 'technologie', 'espace', 'zombies', 
            'pirates', 'ninjas', 'robots', 'vampires', 'aliens'
        ]
        
        return {
            'genre': random.choice(genres),
            'ambiance': random.choice(ambiances),
            'keywords': ', '.join(random.sample(keywords_pool, 3))
        }
